package Gerenciamento;

public class Fases {
    private static char[] fase0 = "public class PrimeiraClasse {\n    public static void main(String[] args) {\n        System.out.println(\"Hello world!\");\n    }\n}".toCharArray();
    private static char[] fase1 = "import java.util.Scanner;\n\npublic class ConversorDeTemperatura {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(\"Escolha a opção:\");\n        System.out.println(\"1. Celsius para Fahrenheit\");\n        System.out.println(\"2. Fahrenheit para Celsius\");\n\n        int escolha = scanner.nextInt();\n\n        switch (escolha) {\n            case 1:\n                System.out.print(\"Digite a temperatura em Celsius: \");\n                double celsius = scanner.nextDouble();\n                double fahrenheit = celsiusParaFahrenheit(celsius);\n                System.out.println(\"Temperatura em Fahrenheit: \" + fahrenheit);\n                break;\n\n            case 2:\n                System.out.print(\"Digite a temperatura em Fahrenheit: \");\n                double fahrenheitInput = scanner.nextDouble();\n                double celsiusResult = fahrenheitParaCelsius(fahrenheitInput);\n                System.out.println(\"Temperatura em Celsius: \" + celsiusResult);\n                break;\n\n            default:\n                System.out.println(\"Opção inválida.\");\n        }\n\n        scanner.close();\n    }\n\n    private static double celsiusParaFahrenheit(double celsius) {\n        return (celsius * 9 / 5) + 32;\n    }\n\n    private static double fahrenheitParaCelsius(double fahrenheit) {\n        return (fahrenheit - 32) * 5 / 9;\n    }\n}\n".toCharArray();
    private static char[] fase2 = "import java.util.Scanner;\n\npublic class CalculadoraSimples {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        double numero1, numero2, resultado;\n        char operacao;\n\n        System.out.println(\"Digite o primeiro número:\");\n        numero1 = scanner.nextDouble();\n\n        System.out.println(\"Digite a operação (+, -, *, /):\");\n        operacao = scanner.next().charAt(0);\n\n        System.out.println(\"Digite o segundo número:\");\n        numero2 = scanner.nextDouble();\n\n        switch (operacao) {\n            case '+':\n                resultado = numero1 + numero2;\n                System.out.println(\"Resultado: \" + resultado);\n                break;\n            case '-':\n                resultado = numero1 - numero2;\n                System.out.println(\"Resultado: \" + resultado);\n                break;\n            case '*':\n                resultado = numero1 * numero2;\n                System.out.println(\"Resultado: \" + resultado);\n                break;\n            case '/':\n                if (numero2 != 0) {\n                    resultado = numero1 / numero2;\n                    System.out.println(\"Resultado: \" + resultado);\n                } else {\n                    System.out.println(\"Erro: Divisão por zero não é permitida.\");\n                }\n                break;\n            default:\n                System.out.println(\"Operação inválida\");\n        }\n\n        scanner.close();\n    }\n}\n".toCharArray();
    private static char[] fase3 = "import java.util.ArrayList;\nimport java.util.Scanner;\n\nclass Livro {\n    String titulo;\n    String autor;\n    int anoPublicacao;\n\n    Livro(String titulo, String autor, int anoPublicacao) {\n        this.titulo = titulo;\n        this.autor = autor;\n        this.anoPublicacao = anoPublicacao;\n    }\n}\n\npublic class GerenciadorBiblioteca {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        ArrayList<Livro> biblioteca = new ArrayList<>();\n\n        while (true) {\n            System.out.println(\"1. Adicionar Livro\");\n            System.out.println(\"2. Listar Livros\");\n            System.out.println(\"3. Sair\");\n            System.out.print(\"Escolha uma opção: \");\n            \n            int escolha = scanner.nextInt();\n\n            switch (escolha) {\n                case 1:\n                    System.out.print(\"Digite o título do livro: \");\n                    String titulo = scanner.next();\n                    System.out.print(\"Digite o autor do livro: \");\n                    String autor = scanner.next();\n                    System.out.print(\"Digite o ano de publicação do livro: \");\n                    int anoPublicacao = scanner.nextInt();\n\n                    Livro novoLivro = new Livro(titulo, autor, anoPublicacao);\n                    biblioteca.add(novoLivro);\n\n                    System.out.println(\"Livro adicionado com sucesso!\n\");\n                    break;\n\n                case 2:\n                    System.out.println(\"Lista de Livros na Biblioteca:\");\n                    for (Livro livro : biblioteca) {\n                        System.out.println(\"Título: \" + livro.titulo);\n                        System.out.println(\"Autor: \" + livro.autor);\n                        System.out.println(\"Ano de Publicação: \" + livro.anoPublicacao);\n                        System.out.println(\"------------------------\");\n                    }\n                    break;\n\n                case 3:\n                    System.out.println(\"Saindo do Gerenciador de Biblioteca. Até mais!\");\n                    scanner.close();\n                    System.exit(0);\n\n                default:\n                    System.out.println(\"Opção inválida. Tente novamente.\n\");\n            }\n        }\n    }\n}\n".toCharArray();
    private static char[] fase4 = "import java.sql.*;\n\npublic class CervejariaApp {\n\n    public static void main(String[] args) {\n        try {\n            Connection conexao = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/estoque_cervejaria\", \"usuario\", \"senha\");\n\n            criarTabelaBebidas(conexao);\n\n            // Exemplo de uso\n            Bebida cervejaIPA = new Bebida(1, \"IPA\", 100);\n            cervejaIPA.salvarBebida();\n\n            Bebida cervejaPilsen = new Bebida(2, \"Pilsen\", 150);\n            cervejaPilsen.salvarBebida();\n\n            Bebida.listarBebidas();\n\n            conexao.close();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private static void criarTabelaBebidas(Connection conexao) {\n        try {\n            Statement statement = conexao.createStatement();\n\n            String sql = \"CREATE TABLE IF NOT EXISTS bebidas (\" +\n                    \"id INT PRIMARY KEY,\" +\n                    \"nome VARCHAR(255) NOT NULL,\" +\n                    \"quantidade INT NOT NULL)\";\n            statement.executeUpdate(sql);\n\n            statement.close();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\nclass Bebida {\n    private int id;\n    private String nome;\n    private int quantidade;\n\n    public Bebida(int id, String nome, int quantidade) {\n        this.id = id;\n        this.nome = nome;\n        this.quantidade = quantidade;\n    }\n\n    public void salvarBebida() {\n        try {\n            Connection conexao = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/estoque_cervejaria\", \"usuario\", \"senha\");\n\n            String sql = \"INSERT INTO bebidas (id, nome, quantidade) VALUES (?, ?, ?)\";\n            try (PreparedStatement statement = conexao.prepareStatement(sql)) {\n                statement.setInt(1, this.id);\n                statement.setString(2, this.nome);\n                statement.setInt(3, this.quantidade);\n                statement.executeUpdate();\n            }\n\n            conexao.close();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void listarBebidas() {\n        try {\n            Connection conexao = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/estoque_cervejaria\", \"usuario\", \"senha\");\n\n            String sql = \"SELECT * FROM bebidas\";\n            try (Statement statement = conexao.createStatement();\n                 ResultSet resultSet = statement.executeQuery(sql)) {\n\n                while (resultSet.next()) {\n                    System.out.println(\"ID: \" + resultSet.getInt(\"id\") +\n                            \", Nome: \" + resultSet.getString(\"nome\") +\n                            \", Quantidade: \" + resultSet.getInt(\"quantidade\"));\n                }\n            }\n\n            conexao.close();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n}\n".toCharArray();
    private static char[] fase5 = "import java.sql.*;\nimport java.util.Scanner;\n\npublic class GerenciadorTarefas {\n\n    private static final String URL = \"jdbc:sqlite:tarefas.db\";\n\n    public static void main(String[] args) {\n        try {\n            // Inicialização da tabela de tarefas\n            criarTabela();\n\n            Scanner scanner = new Scanner(System.in);\n\n            while (true) {\n                System.out.println(\"1. Adicionar Tarefa\");\n                System.out.println(\"2. Listar Tarefas\");\n                System.out.println(\"3. Sair\");\n                System.out.print(\"Escolha uma opção: \");\n\n                int escolha = scanner.nextInt();\n\n                switch (escolha) {\n                    case 1:\n                        System.out.print(\"Digite a descrição da tarefa: \");\n                        scanner.nextLine(); // Consumir a quebra de linha\n                        String descricao = scanner.nextLine();\n                        adicionarTarefa(descricao);\n                        System.out.println(\"Tarefa adicionada com sucesso!\n\");\n                        break;\n\n                    case 2:\n                        listarTarefas();\n                        break;\n\n                    case 3:\n                        System.out.println(\"Saindo do Gerenciador de Tarefas. Até mais!\");\n                        scanner.close();\n                        System.exit(0);\n\n                    default:\n                        System.out.println(\"Opção inválida. Tente novamente.\n\");\n                }\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private static void criarTabela() throws SQLException {\n        try (Connection connection = DriverManager.getConnection(URL);\n             Statement statement = connection.createStatement()) {\n            String query = \"CREATE TABLE IF NOT EXISTS tarefas (id INTEGER PRIMARY KEY AUTOINCREMENT, descricao TEXT)\";\n            statement.executeUpdate(query);\n        }\n    }\n\n    private static void adicionarTarefa(String descricao) throws SQLException {\n        try (Connection connection = DriverManager.getConnection(URL);\n             PreparedStatement preparedStatement = connection.prepareStatement(\"INSERT INTO tarefas (descricao) VALUES (?)\")) {\n            preparedStatement.setString(1, descricao);\n            preparedStatement.executeUpdate();\n        }\n    }\n\n    private static void listarTarefas() throws SQLException {\n        try (Connection connection = DriverManager.getConnection(URL);\n             Statement statement = connection.createStatement();\n             ResultSet resultSet = statement.executeQuery(\"SELECT * FROM tarefas\")) {\n            System.out.println(\"Lista de Tarefas:\");\n            while (resultSet.next()) {\n                int id = resultSet.getInt(\"id\");\n                String descricao = resultSet.getString(\"descricao\");\n                System.out.println(id + \". \" + descricao);\n            }\n            System.out.println();\n        }\n    }\n}\n".toCharArray();
    private static char[] fase6 = "import javafx.application.Application;\nimport javafx.application.Platform;\nimport javafx.geometry.Insets;\nimport javafx.scene.Scene;\nimport javafx.scene.control.*;\nimport javafx.scene.layout.BorderPane;\nimport javafx.scene.layout.HBox;\nimport javafx.stage.Stage;\n\nimport java.io.*;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.sql.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ChatAppComRede extends Application {\n\n    private static final String URL = \"jdbc:sqlite:chat_com_rede.db\";\n    private static final int PORTA = 9999;\n\n    private TextArea chatArea;\n    private TextField messageField;\n    private ListView<String> userList;\n\n    private List<ChatClient> clients = new ArrayList<>();\n    private ServerSocket serverSocket;\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n\n    @Override\n    public void start(Stage primaryStage) {\n        primaryStage.setTitle(\"Chat App com Rede\");\n\n        // Inicialização do banco de dados\n        criarTabela();\n\n        // Componentes da interface\n        chatArea = new TextArea();\n        messageField = new TextField();\n        Button sendButton = new Button(\"Enviar\");\n        userList = new ListView<>();\n\n        // Layout da interface\n        HBox bottomBox = new HBox(messageField, sendButton);\n        bottomBox.setSpacing(10);\n        bottomBox.setPadding(new Insets(10));\n\n        BorderPane layout = new BorderPane();\n        layout.setCenter(chatArea);\n        layout.setBottom(bottomBox);\n        layout.setRight(userList);\n\n        // Inicialização da cena e exibição\n        Scene scene = new Scene(layout, 600, 400);\n        primaryStage.setScene(scene);\n        primaryStage.show();\n\n        // Inicialização do servidor\n        iniciarServidor();\n\n        // Criação de um cliente padrão para o usuário\n        criarCliente(\"Usuário Padrão\");\n\n        // Atualização da lista de usuários na interface\n        atualizarListaUsuarios();\n    }\n\n    private void criarTabela() {\n        try (Connection connection = DriverManager.getConnection(URL);\n             Statement statement = connection.createStatement()) {\n            String query = \"CREATE TABLE IF NOT EXISTS mensagens (\" +\n                    \"id INTEGER PRIMARY KEY AUTOINCREMENT, \" +\n                    \"usuario TEXT, \" +\n                    \"mensagem TEXT)\";\n            statement.executeUpdate(query);\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void iniciarServidor() {\n        new Thread(() -> {\n            try {\n                serverSocket = new ServerSocket(PORTA);\n                while (true) {\n                    Socket socket = serverSocket.accept();\n                    ObjectInputStream inputStream = new ObjectInputStream(socket.getInputStream());\n                    String usuario = (String) inputStream.readObject();\n                    criarCliente(usuario);\n                    inputStream.close();\n                    socket.close();\n                }\n            } catch (IOException | ClassNotFoundException e) {\n                e.printStackTrace();\n            }\n        }).start();\n    }\n\n    private void criarCliente(String usuario) {\n        ChatClient client = new ChatClient(usuario);\n        clients.add(client);\n\n        // Adicionar cliente como observador para atualizações da interface\n        client.addObserver(message -> Platform.runLater(() -> {\n            chatArea.appendText(message + \"\n\");\n            salvarMensagem(usuario, message);\n        }));\n\n        // Adicionar cliente à lista de usuários\n        atualizarListaUsuarios();\n    }\n\n    private void atualizarListaUsuarios() {\n        userList.getItems().clear();\n        for (ChatClient client : clients) {\n            userList.getItems().add(client.getUsuario());\n        }\n    }\n\n    private void enviarMensagemRede(String mensagem) {\n        for (ChatClient client : clients) {\n            client.enviarMensagem(mensagem);\n        }\n    }\n\n    private void salvarMensagem(String usuario, String mensagem) {\n        try (Connection connection = DriverManager.getConnection(URL);\n             PreparedStatement preparedStatement = connection.prepareStatement(\"INSERT INTO mensagens (usuario, mensagem) VALUES (?, ?)\")) {\n            preparedStatement.setString(1, usuario);\n            preparedStatement.setString(2, mensagem);\n            preparedStatement.executeUpdate();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private static class ChatClient extends Observable {\n        private String usuario;\n\n        ChatClient(String usuario) {\n            this.usuario = usuario;\n        }\n\n        String getUsuario() {\n            return usuario;\n        }\n\n        void enviarMensagem(String mensagem) {\n            setChanged();\n            notifyObservers(usuario + \": \" + mensagem);\n        }\n    }\n}\n".toCharArray();
    private static char[] fase7 = "import javafx.application.Application;\nimport javafx.geometry.Insets;\nimport javafx.scene.Scene;\nimport javafx.scene.control.*;\nimport javafx.scene.layout.*;\nimport javafx.stage.Stage;\n\nimport java.sql.*;\nimport java.util.Optional;\n\npublic class GerenciadorTarefasAvancado extends Application {\n\n    private static final String URL = \"jdbc:sqlite:tarefas_avancado.db\";\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n\n    @Override\n    public void start(Stage primaryStage) {\n        primaryStage.setTitle(\"Gerenciador de Tarefas Avançado\");\n\n        // Inicialização do banco de dados\n        criarTabela();\n\n        // Componentes da interface\n        ListView<Tarefa> listaTarefas = new ListView<>();\n        TextField campoTarefa = new TextField();\n        ComboBox<String> comboCategorias = new ComboBox<>();\n        comboCategorias.getItems().addAll(\"Trabalho\", \"Estudo\", \"Pessoal\");\n\n        Button btnAdicionar = new Button(\"Adicionar\");\n        btnAdicionar.setOnAction(e -> adicionarTarefa(campoTarefa.getText(), comboCategorias.getValue(), listaTarefas));\n\n        Button btnRemover = new Button(\"Remover\");\n        btnRemover.setOnAction(e -> removerTarefa(listaTarefas));\n\n        // Layout da interface\n        HBox hbox = new HBox(campoTarefa, comboCategorias, btnAdicionar, btnRemover);\n        hbox.setSpacing(10);\n        hbox.setPadding(new Insets(10));\n\n        BorderPane layout = new BorderPane();\n        layout.setCenter(listaTarefas);\n        layout.setBottom(hbox);\n\n        // Inicialização da cena e exibição\n        Scene scene = new Scene(layout, 600, 400);\n        primaryStage.setScene(scene);\n        primaryStage.show();\n\n        // Carregar tarefas do banco de dados ao iniciar\n        carregarTarefas(listaTarefas);\n    }\n\n    private void criarTabela() {\n        try (Connection connection = DriverManager.getConnection(URL);\n             Statement statement = connection.createStatement()) {\n            String query = \"CREATE TABLE IF NOT EXISTS tarefas (\" +\n                    \"id INTEGER PRIMARY KEY AUTOINCREMENT, \" +\n                    \"descricao TEXT, \" +\n                    \"categoria TEXT)\";\n            statement.executeUpdate(query);\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void adicionarTarefa(String descricao, String categoria, ListView<Tarefa> listaTarefas) {\n        if (!descricao.isEmpty() && !categoria.isEmpty()) {\n            Tarefa novaTarefa = new Tarefa(descricao, categoria);\n            inserirTarefa(novaTarefa);\n            listaTarefas.getItems().add(novaTarefa);\n        }\n    }\n\n    private void inserirTarefa(Tarefa tarefa) {\n        try (Connection connection = DriverManager.getConnection(URL);\n             PreparedStatement preparedStatement = connection.prepareStatement(\"INSERT INTO tarefas (descricao, categoria) VALUES (?, ?)\")) {\n            preparedStatement.setString(1, tarefa.getDescricao());\n            preparedStatement.setString(2, tarefa.getCategoria());\n            preparedStatement.executeUpdate();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void removerTarefa(ListView<Tarefa> listaTarefas) {\n        Tarefa tarefaSelecionada = listaTarefas.getSelectionModel().getSelectedItem();\n        if (tarefaSelecionada != null) {\n            Alert alert = new Alert(Alert.AlertType.CONFIRMATION);\n            alert.setTitle(\"Confirmar Remoção\");\n            alert.setHeaderText(\"Você tem certeza que deseja remover esta tarefa?\");\n            alert.setContentText(tarefaSelecionada.getDescricao());\n\n            Optional<ButtonType> result = alert.showAndWait();\n            if (result.isPresent() && result.get() == ButtonType.OK) {\n                deletarTarefa(tarefaSelecionada);\n                listaTarefas.getItems().remove(tarefaSelecionada);\n            }\n        }\n    }\n\n    private void deletarTarefa(Tarefa tarefa) {\n        try (Connection connection = DriverManager.getConnection(URL);\n             PreparedStatement preparedStatement = connection.prepareStatement(\"DELETE FROM tarefas WHERE id = ?\")) {\n            preparedStatement.setInt(1, tarefa.getId());\n            preparedStatement.executeUpdate();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void carregarTarefas(ListView<Tarefa> listaTarefas) {\n        try (Connection connection = DriverManager.getConnection(URL);\n             Statement statement = connection.createStatement();\n             ResultSet resultSet = statement.executeQuery(\"SELECT * FROM tarefas\")) {\n            while (resultSet.next()) {\n                int id = resultSet.getInt(\"id\");\n                String descricao = resultSet.getString(\"descricao\");\n                String categoria = resultSet.getString(\"categoria\");\n                Tarefa tarefa = new Tarefa(id, descricao, categoria);\n                listaTarefas.getItems().add(tarefa);\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static class Tarefa {\n        private int id;\n        private String descricao;\n        private String categoria;\n\n        public Tarefa(int id, String descricao, String categoria) {\n            this.id = id;\n            this.descricao = descricao;\n            this.categoria = categoria;\n        }\n\n        public Tarefa(String descricao, String categoria) {\n            this.descricao = descricao;\n            this.categoria = categoria;\n        }\n\n        public int getId() {\n            return id;\n        }\n\n        public String getDescricao() {\n            return descricao;\n        }\n\n        public String getCategoria() {\n            return categoria;\n        }\n\n        @Override\n        public String toString() {\n            return descricao + \" (\" + categoria + \")\";\n        }\n    }\n}\n".toCharArray();
    
    
    String[] vetorDeFases = new String[]{new String(fase0), new String(fase1),
        new String(fase2), new String(fase3),
        new String(fase4), new String(fase5),
        new String(fase6), new String(fase7)
    };

  private int indiceAtual = -1;
    
    
    public String obterFaseAtual() {
        indiceAtual = (indiceAtual + 1) % vetorDeFases.length;
        String faseAtual = vetorDeFases[indiceAtual];
        return faseAtual;
    }

    
    public int getIndice(){
        return indiceAtual;
    }
    public void setIndice(int i){
        indiceAtual = i;
    }

}